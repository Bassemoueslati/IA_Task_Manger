================================================================================
                    PLATEFORME DE GESTION DE TÂCHES INTELLIGENTE
                              (AI TASK MANAGER)
                           DOCUMENTATION COMPLÈTE
================================================================================

📋 TABLE DES MATIÈRES
================================================================================
1. PRÉSENTATION GÉNÉRALE
2. ARCHITECTURE DU PROJET
3. STRUCTURE DES DOSSIERS
4. TECHNOLOGIES UTILISÉES
5. BACKEND - ANALYSE DÉTAILLÉE
6. FRONTEND - ANALYSE DÉTAILLÉE
7. BASE DE DONNÉES
8. RELATIONS ENTRE LES FICHIERS
9. FLUX DE DONNÉES
10. FONCTIONNALITÉS PRINCIPALES
11. SÉCURITÉ
12. DÉPLOIEMENT
13. MAINTENANCE ET ÉVOLUTION

================================================================================
1. PRÉSENTATION GÉNÉRALE
================================================================================

🎯 OBJECTIF DU PROJET :
Cette plateforme est une application web complète de gestion de tâches intelligente
qui permet aux utilisateurs de :
- Créer et gérer des projets
- Organiser des tâches avec un système Kanban
- Collaborer en équipe
- Utiliser un chatbot IA pour l'assistance
- Recevoir des notifications en temps réel
- Analyser les statistiques de productivité

🏗️ ARCHITECTURE :
- Architecture MERN Stack (MongoDB, Express.js, React.js, Node.js)
- API RESTful pour la communication client-serveur
- Authentification JWT (JSON Web Tokens)
- Interface utilisateur moderne avec Tailwind CSS
- Intégration IA avec Ollama/LLaMA

================================================================================
2. ARCHITECTURE DU PROJET
================================================================================

📁 STRUCTURE PRINCIPALE :
```
Plateforme de gestion de tâches intelligente (AI Task Manager)/
├── backend/                    # Serveur Node.js + Express
├── frontend/                   # Application React
├── docker-compose.yml          # Configuration Docker
├── start.ps1                   # Script de démarrage
├── install-ollama.ps1          # Installation IA
├── test-setup.ps1              # Tests de configuration
└── explication.txt             # Ce fichier
```

🔄 FLUX GÉNÉRAL :
1. L'utilisateur interagit avec le frontend React
2. React envoie des requêtes HTTP à l'API Express
3. Express traite les requêtes et communique avec MongoDB
4. Les données sont renvoyées au frontend pour affichage
5. Le chatbot IA traite les demandes via Ollama

================================================================================
3. STRUCTURE DES DOSSIERS
================================================================================

📂 BACKEND (backend/) :
```
backend/
├── models/                     # Modèles de données MongoDB
│   ├── User.js                 # Modèle utilisateur
│   ├── Project.js              # Modèle projet
│   ├── Task.js                 # Modèle tâche
│   ├── Chat.js                 # Modèle conversation chat
│   └── Notification.js         # Modèle notifications
├── routes/                     # Routes API REST
│   ├── auth.js                 # Authentification (login/register)
│   ├── projects.js             # CRUD projets + statistiques
│   ├── tasks.js                # CRUD tâches + commentaires
│   ├── chat.js                 # Gestion du chatbot
│   ├── ai.js                   # Services IA
│   └── notifications.js        # Système de notifications
├── middleware/                 # Middlewares Express
│   └── auth.js                 # Vérification JWT
├── services/                   # Services externes
│   └── llamaService.js         # Interface avec Ollama IA
├── server.js                   # Point d'entrée serveur
├── migrate.js                  # Scripts de migration DB
├── package.json                # Dépendances Node.js
├── .env                        # Variables d'environnement
└── Dockerfile                  # Configuration Docker
```

📂 FRONTEND (frontend/) :
```
frontend/
├── src/                        # Code source React
│   ├── components/             # Composants React
│   │   ├── App.js              # Composant principal
│   │   ├── AuthContext.js      # Contexte d'authentification
│   │   ├── Login.js            # Formulaire de connexion
│   │   ├── Register.js         # Formulaire d'inscription
│   │   ├── Dashboard.js        # Vue liste des tâches
│   │   ├── Kanban.js           # Tableau Kanban
│   │   ├── ProjectSelector.js  # Sélecteur de projets
│   │   ├── ProjectStats.js     # Statistiques projet
│   │   ├── ProjectMembers.js   # Gestion des membres
│   │   ├── TaskDetail.js       # Détails d'une tâche
│   │   ├── Notifications.js    # Affichage notifications
│   │   ├── Chatbot.js          # Interface chatbot IA
│   │   └── ThemeSwitcher.js    # Basculeur thème sombre/clair
│   ├── App.css                 # Styles CSS personnalisés
│   ├── index.css               # Styles globaux + Tailwind
│   ├── index.js                # Point d'entrée React
│   └── setupProxy.js           # Configuration proxy développement
├── public/                     # Fichiers statiques
│   ├── index.html              # Template HTML principal
│   ├── favicon.ico             # Icône du site
│   └── manifest.json           # Métadonnées PWA
├── package.json                # Dépendances React
├── tailwind.config.js          # Configuration Tailwind CSS
├── postcss.config.js           # Configuration PostCSS
└── Dockerfile                  # Configuration Docker
```

================================================================================
4. TECHNOLOGIES UTILISÉES
================================================================================

🖥️ BACKEND :
- Node.js 18+ : Runtime JavaScript serveur
- Express.js 4.x : Framework web minimaliste
- MongoDB 6.x : Base de données NoSQL
- Mongoose 7.x : ODM pour MongoDB
- JWT : Authentification par tokens
- bcryptjs : Hachage des mots de passe
- cors : Gestion des requêtes cross-origin
- dotenv : Gestion des variables d'environnement

🎨 FRONTEND :
- React 18.x : Bibliothèque UI
- React Hooks : Gestion d'état moderne
- Tailwind CSS 3.x : Framework CSS utilitaire
- PostCSS : Traitement CSS
- Fetch API : Requêtes HTTP
- Context API : Gestion d'état global

🤖 INTELLIGENCE ARTIFICIELLE :
- Ollama : Plateforme IA locale
- LLaMA 2/3 : Modèle de langage
- API REST : Communication avec l'IA

🐳 DÉPLOIEMENT :
- Docker : Conteneurisation
- Docker Compose : Orchestration multi-conteneurs
- PowerShell : Scripts d'automatisation

================================================================================
5. BACKEND - ANALYSE DÉTAILLÉE
================================================================================

🗄️ MODÈLES DE DONNÉES (models/) :

📄 User.js :
```javascript
{
  name: String,           // Nom complet
  email: String,          // Email unique
  password: String,       // Mot de passe haché
  role: String,          // Rôle (admin, user)
  createdAt: Date,       // Date de création
  updatedAt: Date        // Dernière modification
}
```

📄 Project.js :
```javascript
{
  name: String,           // Nom du projet
  description: String,    // Description
  owner: ObjectId,        // Propriétaire (User)
  members: [{             // Membres du projet
    user: ObjectId,       // Référence User
    role: String,         // Rôle dans le projet
    joinedAt: Date        // Date d'ajout
  }],
  status: String,         // Statut (active, completed, archived)
  startDate: Date,        // Date de début
  endDate: Date,          // Date de fin
  color: String,          // Couleur pour l'UI
  createdAt: Date,
  updatedAt: Date
}
```

📄 Task.js :
```javascript
{
  title: String,          // Titre de la tâche
  description: String,    // Description détaillée
  status: String,         // Statut (todo, in progress, done)
  priority: String,       // Priorité (low, medium, high)
  dueDate: Date,          // Date d'échéance
  estimatedTime: Number,  // Temps estimé (heures)
  actualTime: Number,     // Temps réel passé
  project: ObjectId,      // Projet parent
  owner: ObjectId,        // Créateur
  assignedTo: [ObjectId], // Assignés
  subtasks: [{            // Sous-tâches
    title: String,
    completed: Boolean,
    createdAt: Date
  }],
  labels: [String],       // Étiquettes
  comments: [{            // Commentaires
    user: ObjectId,
    content: String,
    createdAt: Date
  }],
  attachments: [{         // Pièces jointes
    filename: String,
    originalName: String,
    mimetype: String,
    size: Number,
    uploadedAt: Date
  }],
  createdAt: Date,
  updatedAt: Date
}
```

🛣️ ROUTES API (routes/) :

📄 auth.js :
- POST /api/auth/register : Inscription utilisateur
- POST /api/auth/login : Connexion utilisateur
- GET /api/auth/me : Profil utilisateur actuel

📄 projects.js :
- GET /api/projects : Liste des projets utilisateur
- POST /api/projects : Créer un projet
- PUT /api/projects/:id : Modifier un projet
- DELETE /api/projects/:id : Supprimer un projet
- POST /api/projects/:id/members : Ajouter un membre
- DELETE /api/projects/:id/members/:userId : Retirer un membre
- GET /api/projects/:id/stats : Statistiques du projet

📄 tasks.js :
- GET /api/tasks : Liste des tâches (avec filtre projet)
- GET /api/tasks/project/:projectId : Tâches d'un projet
- POST /api/tasks : Créer une tâche
- PUT /api/tasks/:id : Modifier une tâche
- DELETE /api/tasks/:id : Supprimer une tâche
- POST /api/tasks/:id/comments : Ajouter un commentaire
- GET /api/tasks/:id/comments : Lire les commentaires
- PUT /api/tasks/:id/subtasks/:subtaskId : Modifier sous-tâche
- PUT /api/tasks/:id/assign : Assigner la tâche

🔒 MIDDLEWARE (middleware/) :

📄 auth.js :
- Vérifie la présence du token JWT
- Décode le token et extrait l'utilisateur
- Ajoute req.user pour les routes protégées
- Gère les erreurs d'authentification

🤖 SERVICES (services/) :

📄 llamaService.js :
- Interface avec l'API Ollama
- Gestion des conversations
- Traitement des réponses IA
- Gestion des erreurs de connexion

================================================================================
6. FRONTEND - ANALYSE DÉTAILLÉE
================================================================================

⚛️ COMPOSANTS REACT (src/) :

📄 App.js - Composant Principal :
```javascript
Responsabilités :
- Point d'entrée de l'application
- Gestion de l'état global (projet sélectionné)
- Orchestration des composants
- Gestion de l'authentification

État géré :
- selectedProject : Projet actuellement sélectionné
- projectAdded : Trigger pour rafraîchir les listes
- showRegister : Basculer login/register

Flux :
1. Vérifie l'authentification via AuthContext
2. Affiche Login/Register si non connecté
3. Affiche l'interface principale si connecté
4. Coordonne les interactions entre composants
```

📄 AuthContext.js - Contexte d'Authentification :
```javascript
Responsabilités :
- Gestion centralisée de l'authentification
- Stockage du token JWT
- Persistance de la session
- Fourniture des méthodes login/logout

État géré :
- user : Informations utilisateur connecté
- token : Token JWT pour les requêtes API
- loading : État de chargement

Méthodes :
- login(userData) : Connexion utilisateur
- logout() : Déconnexion
- checkAuth() : Vérification du token au démarrage
```

📄 Kanban.js - Tableau Kanban :
```javascript
Responsabilités :
- Affichage des tâches en colonnes (Todo, In Progress, Done)
- Drag & Drop pour changer le statut
- CRUD des tâches
- Gestion des statistiques projet
- Interface avec ProjectMembers

Colonnes :
- todo : À faire
- in progress : En cours
- done : Terminé

Fonctionnalités :
- Drag & Drop natif HTML5
- Modales d'ajout/modification
- Détails de tâche (TaskDetail)
- Gestion des membres projet
- Statistiques en temps réel
```

📄 ProjectSelector.js - Sélecteur de Projets :
```javascript
Responsabilités :
- Sélection du projet actif
- CRUD des projets
- Interface moderne avec design cards
- Gestion des états vides

Fonctionnalités :
- Dropdown de sélection
- Liste visuelle des projets
- Boutons Modifier/Supprimer
- Modales stylisées
- Animations CSS
- Indicateurs visuels
```

📄 Dashboard.js - Vue Liste :
```javascript
Responsabilités :
- Affichage des tâches en liste
- Alternative au Kanban
- Synchronisation avec Kanban via events
- Filtrage par projet

Synchronisation :
- Écoute les events 'taskDeleted', 'taskAdded', 'taskUpdated'
- Met à jour la liste en temps réel
- Dispatch des events pour notifier les autres composants
```

📄 ProjectStats.js - Statistiques :
```javascript
Responsabilités :
- Affichage des métriques projet
- Graphiques de progression
- Alertes et notifications
- Calculs de performance

Métriques :
- Nombre total de tâches
- Répartition par statut
- Taux de completion
- Tâches en retard
- Efficacité temporelle
```

📄 Chatbot.js - Assistant IA :
```javascript
Responsabilités :
- Interface de chat avec l'IA
- Gestion des conversations
- Historique des messages
- Intégration avec l'API IA

Fonctionnalités :
- Chat en temps réel
- Suggestions automatiques
- Historique persistant
- Gestion des erreurs IA
```

🎨 STYLES (CSS) :

📄 App.css :
- Animations personnalisées (fadeInUp, pulse, shimmer)
- Styles pour les cartes projet
- Scrollbars personnalisées
- Classes utilitaires

📄 index.css :
- Import Tailwind CSS
- Styles globaux
- Variables CSS personnalisées
- Reset CSS

================================================================================
7. BASE DE DONNÉES
================================================================================

🗃️ MONGODB - STRUCTURE :

📊 COLLECTIONS :
1. users : Utilisateurs de la plateforme
2. projects : Projets créés
3. tasks : Tâches des projets
4. chats : Conversations avec l'IA
5. notifications : Notifications utilisateur

🔗 RELATIONS :
```
User (1) ←→ (N) Project (owner)
User (N) ←→ (N) Project (members)
Project (1) ←→ (N) Task
User (1) ←→ (N) Task (owner)
User (N) ←→ (N) Task (assignedTo)
User (1) ←→ (N) Chat
User (1) ←→ (N) Notification
```

📈 INDEX RECOMMANDÉS :
```javascript
// Users
db.users.createIndex({ email: 1 }, { unique: true })

// Projects
db.projects.createIndex({ owner: 1 })
db.projects.createIndex({ "members.user": 1 })

// Tasks
db.tasks.createIndex({ project: 1 })
db.tasks.createIndex({ owner: 1 })
db.tasks.createIndex({ assignedTo: 1 })
db.tasks.createIndex({ status: 1 })
db.tasks.createIndex({ dueDate: 1 })
```

================================================================================
8. RELATIONS ENTRE LES FICHIERS
================================================================================

🔄 FLUX DE DONNÉES :

1. AUTHENTIFICATION :
```
Login.js → AuthContext.js → /api/auth/login → auth.js → User.js → MongoDB
```

2. GESTION DES PROJETS :
```
ProjectSelector.js → /api/projects → projects.js → Project.js → MongoDB
                  ↓
App.js (selectedProject) → Kanban.js → ProjectStats.js
```

3. GESTION DES TÂCHES :
```
Kanban.js → /api/tasks → tasks.js → Task.js → MongoDB
    ↓
Dashboard.js (via events)
    ↓
TaskDetail.js
```

4. CHATBOT IA :
```
Chatbot.js → /api/chat → chat.js → llamaService.js → Ollama API
```

🔗 DÉPENDANCES PRINCIPALES :

📄 App.js dépend de :
- AuthContext.js (authentification)
- ProjectSelector.js (sélection projet)
- Kanban.js (interface principale)
- Dashboard.js (vue alternative)
- Notifications.js (alertes)
- Chatbot.js (assistance IA)

📄 Kanban.js dépend de :
- AuthContext.js (token utilisateur)
- TaskDetail.js (détails tâche)
- ProjectStats.js (statistiques)
- ProjectMembers.js (gestion équipe)

📄 Backend routes dépendent de :
- middleware/auth.js (authentification)
- models/*.js (accès données)
- services/*.js (services externes)

================================================================================
9. FLUX DE DONNÉES
================================================================================

🔄 CYCLE DE VIE D'UNE TÂCHE :

1. CRÉATION :
```
Kanban.js (handleAddTask) 
→ POST /api/tasks 
→ tasks.js (router.post) 
→ Task.js (new Task) 
→ MongoDB
→ Response JSON 
→ Kanban.js (setTasks) 
→ Event 'taskAdded' 
→ Dashboard.js (onTaskAdded)
```

2. MODIFICATION :
```
Kanban.js (drag & drop) 
→ PUT /api/tasks/:id 
→ tasks.js (router.put) 
→ Task.findOneAndUpdate 
→ MongoDB
→ Response JSON 
→ Kanban.js (setTasks) 
→ Event 'taskUpdated' 
→ Dashboard.js (onTaskUpdated)
```

3. SUPPRESSION :
```
Kanban.js (handleDeleteTask) 
→ DELETE /api/tasks/:id 
→ tasks.js (router.delete) 
→ Task.findOneAndDelete 
→ MongoDB
→ Kanban.js (setTasks) 
→ Event 'taskDeleted' 
→ Dashboard.js (onTaskDeleted)
```

🔄 SYNCHRONISATION TEMPS RÉEL :

Les composants communiquent via des Custom Events :
```javascript
// Émission d'event
window.dispatchEvent(new CustomEvent('taskDeleted', { 
  detail: { id: taskId } 
}));

// Écoute d'event
window.addEventListener('taskDeleted', (e) => {
  setTasks(tasks => tasks.filter(t => t._id !== e.detail.id));
});
```

================================================================================
10. FONCTIONNALITÉS PRINCIPALES
================================================================================

👤 GESTION DES UTILISATEURS :
- Inscription avec validation email
- Connexion sécurisée JWT
- Profil utilisateur
- Gestion des sessions

📁 GESTION DES PROJETS :
- Création/modification/suppression
- Gestion des membres et rôles
- Statistiques détaillées
- Couleurs personnalisées
- États (actif, terminé, archivé)

✅ GESTION DES TÂCHES :
- Interface Kanban drag & drop
- Vue liste alternative
- Priorités et échéances
- Sous-tâches et commentaires
- Assignation multiple
- Étiquettes personnalisées
- Pièces jointes
- Suivi du temps

📊 STATISTIQUES ET RAPPORTS :
- Métriques par projet
- Taux de completion
- Tâches en retard
- Efficacité temporelle
- Graphiques de progression
- Alertes automatiques

🤖 ASSISTANT IA :
- Chatbot intelligent
- Suggestions de tâches
- Aide à la planification
- Analyse de productivité

🔔 NOTIFICATIONS :
- Alertes en temps réel
- Notifications par email
- Rappels d'échéances
- Mises à jour projet

🎨 INTERFACE UTILISATEUR :
- Design moderne et responsive
- Thème sombre/clair
- Animations fluides
- Accessibilité optimisée

================================================================================
11. SÉCURITÉ
================================================================================

🔒 AUTHENTIFICATION :
- Mots de passe hachés avec bcrypt
- Tokens JWT avec expiration
- Validation des entrées utilisateur
- Protection CSRF

🛡️ AUTORISATION :
- Middleware d'authentification
- Vérification des propriétaires
- Rôles et permissions
- Accès restreint aux ressources

🔐 PROTECTION DES DONNÉES :
- Variables d'environnement (.env)
- Validation côté serveur
- Sanitisation des entrées
- Headers de sécurité CORS

🚫 PRÉVENTION DES ATTAQUES :
- Injection NoSQL (Mongoose)
- XSS (échappement HTML)
- Rate limiting (recommandé)
- HTTPS en production

================================================================================
12. DÉPLOIEMENT
================================================================================

🐳 DOCKER :
```bash
# Démarrage complet
docker-compose up -d

# Services inclus :
- MongoDB (port 27017)
- Backend Node.js (port 5000)
- Frontend React (port 3000)
- Ollama IA (port 11434)
```

📜 SCRIPTS POWERSHELL :
- start.ps1 : Démarrage automatique
- install-ollama.ps1 : Installation IA
- test-setup.ps1 : Tests de configuration

🌐 PRODUCTION :
- Variables d'environnement sécurisées
- Base de données MongoDB Atlas
- Serveur HTTPS
- CDN pour les assets statiques
- Monitoring et logs

================================================================================
13. MAINTENANCE ET ÉVOLUTION
================================================================================

🔧 MAINTENANCE RÉGULIÈRE :
- Mise à jour des dépendances
- Sauvegarde de la base de données
- Monitoring des performances
- Nettoyage des logs

📈 ÉVOLUTIONS POSSIBLES :
- Notifications push
- Intégration calendrier
- Rapports PDF
- API mobile
- Intégrations tierces (Slack, Teams)
- Gestion des fichiers cloud
- Workflow automation
- Tableaux de bord avancés

🐛 DÉBOGAGE :
- Logs serveur dans console
- DevTools React pour le frontend
- MongoDB Compass pour la DB
- Postman pour tester l'API

📚 RESSOURCES UTILES :
- Documentation React : https://react.dev
- Documentation Express : https://expressjs.com
- Documentation MongoDB : https://docs.mongodb.com
- Documentation Tailwind : https://tailwindcss.com

================================================================================
                                FIN DU DOCUMENT
================================================================================

Ce document couvre tous les aspects techniques de votre plateforme de gestion
de tâches intelligente. Pour toute question ou amélioration, référez-vous à
cette documentation complète.

Dernière mise à jour : Décembre 2024
Version du projet : 1.0.0