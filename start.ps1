# Script de d√©marrage complet pour l'application Task Manager
Write-Host "üöÄ D√©marrage de l'application Task Manager..." -ForegroundColor Green

# V√©rifier si Node.js est install√©
$nodeVersion = node --version 2>$null
if (-not $nodeVersion) {
    Write-Host "‚ùå Node.js n'est pas install√©!" -ForegroundColor Red
    Write-Host "üí° T√©l√©chargez Node.js depuis: https://nodejs.org/" -ForegroundColor Yellow
    exit 1
}
Write-Host "‚úÖ Node.js d√©tect√©: $nodeVersion" -ForegroundColor Green

# V√©rifier si MongoDB est accessible
Write-Host "üîç V√©rification de MongoDB..." -ForegroundColor Yellow
try {
    $mongoTest = Test-NetConnection -ComputerName localhost -Port 27017 -WarningAction SilentlyContinue
    if ($mongoTest.TcpTestSucceeded) {
        Write-Host "‚úÖ MongoDB est accessible" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  MongoDB n'est pas accessible sur le port 27017" -ForegroundColor Yellow
        Write-Host "üí° Assurez-vous que MongoDB est d√©marr√© ou utilisez Docker:" -ForegroundColor Yellow
        Write-Host "   docker run -d -p 27017:27017 --name mongodb mongo" -ForegroundColor Cyan
    }
} catch {
    Write-Host "‚ö†Ô∏è  Impossible de v√©rifier MongoDB" -ForegroundColor Yellow
}

# V√©rifier si Ollama est disponible
Write-Host "ü§ñ V√©rification d'Ollama..." -ForegroundColor Yellow
try {
    $ollamaTest = Invoke-RestMethod -Uri "http://localhost:11434/api/tags" -Method Get -TimeoutSec 3
    Write-Host "‚úÖ Ollama est disponible et fonctionne" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è  Ollama n'est pas disponible" -ForegroundColor Yellow
    Write-Host "üí° Pour installer Ollama, ex√©cutez: .\install-ollama.ps1" -ForegroundColor Yellow
    Write-Host "üí° Ou d√©marrez-le manuellement: ollama serve" -ForegroundColor Yellow
}

# Cr√©er le fichier .env s'il n'existe pas
$envPath = "backend\.env"
if (-not (Test-Path $envPath)) {
    Write-Host "üìù Cr√©ation du fichier .env..." -ForegroundColor Yellow
    Copy-Item "backend\.env.example" $envPath
    Write-Host "‚úÖ Fichier .env cr√©√© depuis .env.example" -ForegroundColor Green
    Write-Host "üí° Modifiez backend\.env si n√©cessaire" -ForegroundColor Yellow
}

# Installer les d√©pendances si n√©cessaire
if (-not (Test-Path "backend\node_modules")) {
    Write-Host "üì¶ Installation des d√©pendances backend..." -ForegroundColor Yellow
    Set-Location backend
    npm install
    Set-Location ..
    Write-Host "‚úÖ D√©pendances backend install√©es" -ForegroundColor Green
}

if (-not (Test-Path "frontend\node_modules")) {
    Write-Host "üì¶ Installation des d√©pendances frontend..." -ForegroundColor Yellow
    Set-Location frontend
    npm install
    Set-Location ..
    Write-Host "‚úÖ D√©pendances frontend install√©es" -ForegroundColor Green
}

# Fonction pour d√©marrer les services
function Start-Services {
    Write-Host "üéØ D√©marrage des services..." -ForegroundColor Green
    
    # D√©marrer le backend
    Write-Host "üîß D√©marrage du backend..." -ForegroundColor Yellow
    $backendJob = Start-Job -ScriptBlock {
        Set-Location $using:PWD
        Set-Location backend
        npm run dev
    }
    
    # Attendre un peu pour que le backend d√©marre
    Start-Sleep -Seconds 3
    
    # D√©marrer le frontend
    Write-Host "üé® D√©marrage du frontend..." -ForegroundColor Yellow
    $frontendJob = Start-Job -ScriptBlock {
        Set-Location $using:PWD
        Set-Location frontend
        npm start
    }
    
    Write-Host ""
    Write-Host "üéâ Application d√©marr√©e!" -ForegroundColor Green
    Write-Host "üìã Services actifs:" -ForegroundColor White
    Write-Host "   ‚Ä¢ Backend: http://localhost:5000" -ForegroundColor White
    Write-Host "   ‚Ä¢ Frontend: http://localhost:3000" -ForegroundColor White
    Write-Host "   ‚Ä¢ MongoDB: mongodb://localhost:27017" -ForegroundColor White
    Write-Host "   ‚Ä¢ Ollama: http://localhost:11434" -ForegroundColor White
    Write-Host ""
    Write-Host "üåê Ouvrez votre navigateur sur: http://localhost:3000" -ForegroundColor Cyan
    Write-Host ""
    Write-Host "‚èπÔ∏è  Pour arr√™ter l'application, fermez cette fen√™tre ou appuyez sur Ctrl+C" -ForegroundColor Yellow
    
    # Attendre que les jobs se terminent
    try {
        Wait-Job $backendJob, $frontendJob
    } catch {
        Write-Host "üõë Arr√™t des services..." -ForegroundColor Yellow
    } finally {
        Remove-Job $backendJob, $frontendJob -Force
    }
}

# Demander confirmation pour d√©marrer
$response = Read-Host "Voulez-vous d√©marrer l'application maintenant? (o/n)"
if ($response -eq 'o' -or $response -eq 'O' -or $response -eq 'oui' -or $response -eq '') {
    Start-Services
} else {
    Write-Host "üëã Pour d√©marrer plus tard, ex√©cutez: .\start.ps1" -ForegroundColor Yellow
    Write-Host "üìñ Consultez le README.md pour plus d'informations" -ForegroundColor Yellow
}